import telebot
from telebot import types
import json
import uuid
import logging
import sqlite3
from config import token, ADMIN_IDS

bot = telebot.TeleBot(token)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id TEXT PRIMARY KEY,
            name TEXT,
            description TEXT,
            price REAL,
            photo_id TEXT,
            quantity INTEGER
        )
    ''')
    conn.commit()
    conn.close()


init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_product_to_db(name, description, price, photo_id, quantity):
    try:
        conn = sqlite3.connect('products.db')
        cursor = conn.cursor()
        product_id = str(uuid.uuid4())  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è —Ç–æ–≤–∞—Ä–∞
        cursor.execute('''
            INSERT INTO products (id, name, description, price, photo_id, quantity)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (product_id, name, description, price, photo_id, quantity))
        conn.commit()
        conn.close()
        logger.info(f"–¢–æ–≤–∞—Ä '{name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")


# –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def load_products():
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM products")
    products = cursor.fetchall()
    conn.close()
    return products


# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–¢–æ–≤–∞—Ä—ãüõç', callback_data='btn1')
    btn3 = types.InlineKeyboardButton('–°–∞–ø–ø–æ—Ä—Çü§ù', callback_data='btn3')

    markup.add(btn1)
    markup.add(btn3)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (–±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É)
    if message.from_user.id in ADMIN_IDS:
        btn_admin = types.InlineKeyboardButton('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—åüîß', callback_data='admin_panel')
        markup.add(btn_admin)

    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —Ç—ã –≤ –º–æ–µ–º –º–∞–≥–∞–∑–∏–Ω–µ!', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'btn3')
def support(call):
    bot.send_message(call.message.chat.id, '–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –±–æ—Ç–æ–º - –í–∞—à –¢–µ–∫—Å—Ç')

# –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å
@bot.callback_query_handler(func=lambda call: call.data == 'admin_panel')
def admin_panel(call):
    if call.from_user.id in ADMIN_IDS:
        markup = types.InlineKeyboardMarkup()
        btn_add = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data='add_product')
        btn_delete = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data='delete_product')
        btn_view = types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã', callback_data='view_products')
        btn_back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_menu')
        markup.add(btn_add, btn_delete, btn_view, btn_back)

        bot.send_message(call.message.chat.id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.callback_query_handler(func=lambda call: call.data == 'back_to_menu')
def back_to_menu(call):
    start(call.message)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@bot.callback_query_handler(func=lambda call: call.data == 'add_product')
def add_product(call):
    if call.from_user.id in ADMIN_IDS:
        bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
        bot.register_next_step_handler(call.message, process_product_name)


def process_product_name(message):
    product_name = message.text
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
    bot.register_next_step_handler(message, process_product_description, product_name)


def process_product_description(message, product_name):
    product_description = message.text
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.")
    bot.register_next_step_handler(message, process_product_photo, product_name, product_description)


def process_product_photo(message, product_name, product_description):
    if message.photo:
        photo_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞.")
        bot.register_next_step_handler(message, process_product_price, product_name, product_description, photo_id)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.")
        bot.register_next_step_handler(message, process_product_photo, product_name, product_description)


def process_product_price(message, product_name, product_description, photo_id):
    try:
        product_price = float(message.text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ.")
        bot.register_next_step_handler(message, process_product_quantity, product_name, product_description, photo_id, product_price)
    except ValueError:
        bot.send_message(message.chat.id, "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, process_product_price, product_name, product_description, photo_id)


def process_product_quantity(message, product_name, product_description, photo_id, product_price):
    try:
        product_quantity = int(message.text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
        add_product_to_db(product_name, product_description, product_price, photo_id, product_quantity)
        bot.send_message(message.chat.id, f"–¢–æ–≤–∞—Ä '{product_name}' –¥–æ–±–∞–≤–ª–µ–Ω!")
        start(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    except ValueError:
        bot.send_message(message.chat.id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, process_product_quantity, product_name, product_description, photo_id, product_price)


# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
@bot.callback_query_handler(func=lambda call: call.data == 'delete_product')
def delete_product(call):
    if call.from_user.id in ADMIN_IDS:
        products = load_products()
        if products:
            markup = types.InlineKeyboardMarkup()
            for product in products:
                markup.add(
                    types.InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {product[1]}", callback_data=f"confirm_delete_{product[0]}"))
            markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_admin"))
            bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            admin_panel(call.message)


@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_delete_'))
def confirm_delete_product(call):
    if call.from_user.id in ADMIN_IDS:
        product_id = call.data[len('confirm_delete_'):]

        conn = sqlite3.connect('products.db')
        cursor = conn.cursor()
        cursor.execute(''' DELETE FROM products WHERE id = ? ''', (product_id,))
        conn.commit()
        conn.close()

        bot.send_message(call.message.chat.id, "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω!")
        admin_panel(call.message)


# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤
@bot.callback_query_handler(func=lambda call: call.data == 'view_products')
def view_products(call):
    if call.from_user.id in ADMIN_IDS:
        products = load_products()
        if products:
            for product in products:
                bot.send_photo(call.message.chat.id, product[4],
                               caption=f"–¢–æ–≤–∞—Ä: {product[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product[2]}\n–¶–µ–Ω–∞: {product[3]}‚ÇΩ\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product[5]}")
        else:
            bot.send_message(call.message.chat.id, "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        admin_panel(call)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å


# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@bot.callback_query_handler(func=lambda call: call.data == 'btn1')  # –¢–æ–≤–∞—Ä—ã
def show_products(call):
    products = load_products()
    markup = types.InlineKeyboardMarkup()
    for product in products:
        btn = types.InlineKeyboardButton(f"üîß {product[1]}", callback_data=f"product_{product[1]}")
        markup.add(btn)
    markup.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_menu'))  # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("product_"))
def show_product_details(call):
    product_name = call.data[len("product_"):]
    products = load_products()
    for product in products:
        if product[1] == product_name:
            bot.send_photo(call.message.chat.id, product[4],
                           caption=f"–¢–æ–≤–∞—Ä: {product[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product[2]}\n–¶–µ–Ω–∞: {product[3]}‚ÇΩ\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product[5]}")


if __name__ == '__main__':
    bot.polling(none_stop=True)
